# Generated by Django 4.2.23 on 2025-08-11 19:07

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('distribution', '0005_remove_milktransfer_distributor_and_more'),
        ('suppliers', '0005_milklot_bulk_cooler'),
    ]

    operations = [
        migrations.CreateModel(
            name='CanCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Optional name or code for this can collection event (e.g., 'Morning Route A').", max_length=50)),
                ('total_volume_liters', models.FloatField(default=0.0, help_text='Total milk volume from all cans in this collection.')),
                ('group_parameter', models.CharField(choices=[('fat', 'Fat %'), ('protein', 'Protein %'), ('snf', 'Solids-Not-Fat %'), ('water', 'Water Content %'), ('density', 'Density')], help_text='Criteria used to group milk lots in this collection.', max_length=50)),
                ('group_value', models.FloatField(help_text='The measured value of the chosen group parameter for this pooled collection.')),
                ('group_unit', models.CharField(choices=[('%', 'Percentage'), ('g/L', 'Grams per Liter'), ('kg/m³', 'Kilograms per Cubic Meter'), ('°C', 'Degrees Celsius')], help_text='Unit of the grouping parameter.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this can collection record was created.')),
                ('route', models.ForeignKey(help_text='Distribution route along which cans are collected.', on_delete=django.db.models.deletion.CASCADE, to='distribution.route')),
            ],
        ),
        migrations.CreateModel(
            name='OnFarmTank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Tank name or code for easy identification (e.g., 'Tank-1').", max_length=50)),
                ('capacity_liters', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(15000)])),
                ('current_volume_liters', models.FloatField(default=0.0, help_text='Current amount of milk in the tank in liters.')),
                ('temperature_celsius', models.FloatField(blank=True, help_text='Current milk temperature in Celsius.', null=True)),
                ('filled_at', models.DateTimeField(blank=True, null=True)),
                ('emptied_at', models.DateTimeField(blank=True, null=True)),
                ('last_cleaned_at', models.DateTimeField(blank=True, null=True)),
                ('last_sanitized_at', models.DateTimeField(blank=True, null=True)),
                ('service_interval_days', models.PositiveSmallIntegerField(default=90)),
                ('last_serviced_at', models.DateTimeField(blank=True, null=True)),
                ('last_stirred_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the tank record was created.')),
                ('supplier', models.ForeignKey(help_text='Supplier who owns this farm tank.', on_delete=django.db.models.deletion.CASCADE, to='suppliers.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='CanCollectionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter', models.CharField(choices=[('fat', 'Fat %'), ('protein', 'Protein %'), ('snf', 'Solids-Not-Fat %'), ('water', 'Water Content %'), ('density', 'Density')], max_length=50)),
                ('value', models.FloatField()),
                ('unit', models.CharField(choices=[('%', 'Percentage'), ('g/L', 'Grams per Liter'), ('kg/m³', 'Kilograms per Cubic Meter'), ('°C', 'Degrees Celsius')], max_length=20)),
                ('log_date', models.DateTimeField()),
                ('can_collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='suppliers.cancollection')),
            ],
        ),
        migrations.AddField(
            model_name='milklot',
            name='can_collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='milk_lots', to='suppliers.cancollection'),
        ),
        migrations.AddField(
            model_name='milklot',
            name='on_farm_tank',
            field=models.ForeignKey(blank=True, help_text='The farm tank where this lot was stored before transport.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='milk_lots', to='suppliers.onfarmtank'),
        ),
        migrations.CreateModel(
            name='OnFarmTankLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_date', models.DateTimeField()),
                ('volume_liters', models.FloatField()),
                ('temperature_celsius', models.FloatField(blank=True, null=True)),
                ('filled_at', models.DateTimeField(blank=True, null=True)),
                ('emptied_at', models.DateTimeField(blank=True, null=True)),
                ('last_cleaned_at', models.DateTimeField(blank=True, null=True)),
                ('last_sanitized_at', models.DateTimeField(blank=True, null=True)),
                ('last_stirred_at', models.DateTimeField(blank=True, null=True)),
                ('last_serviced_at', models.DateTimeField(blank=True, null=True)),
                ('on_farm_tank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to='suppliers.onfarmtank')),
            ],
            options={
                'unique_together': {('on_farm_tank', 'log_date')},
            },
        ),
    ]
